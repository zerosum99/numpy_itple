Q1. 리터럴 표기법 이점
- 간결한 표기가 가능
- 생성 시점에 객체에 기능 추가 가능

Q2. 리스트와 튜플의 차이점
- 리스트 : 변경이 가능(가변적) / 튜플 : 변경이 불가능(불변적)
- 리스트는 새로운 요소를 추가하거나 수정 가능하고, 기존 요소를 삭제할 수 있지만 튜플은 이러한 작업 허용 하지 않음.

Q3. 유니버셜 함수의 종류
- 단일 유니버셜 함수
▶ abs, fabs : 각원소의 절대값을 구함. 복소수가 아닌 경우에는 fabs로 빠르게 연산 가능

▶ sqrt : 제곱근을 계산 arr** 0.5와 동일

▶ square : 제곱을 계싼 arr** 2와 동일

▶ Exp : 각 원소에 지수 ex를 계산

▶ Log, log10, log2, logP : 각각 자연로그, 로그10, 로그2, 로그(1+x)

▶ sign : 각 원소의 부호를 계산

▶ ceil : 각 원소의 소수자리를 올림

▶ floor : 각 원소의 소수자리를 버림

▶ rint : 각 원소의 소수자리 반올림, dtype 유지

▶ modf : 원소의 몫과 나머지를 각각 배열로 변환

▶ isnan : 각 원소가 숫자인지 아닌지 NaN 나타내는 불리언 배열

▶ isfinite, isinf : 배열의 각 원소가 유한한지 무한한지 나타내는 불리언 배열

▶ cos, cosh, sin, sinh, tan, tanh : 일반 삼각함수와 쌍곡삼각 함수

▶ logical_not : 각 원소의 논리 부정(not) 값 계산, -arr와 동일

- 이항 유니버셜 함수

▶ add : 두 배열에서 같은 위치의 원소끼리 덧셈

▶ subtract : 첫번째 배열 원소 - 두번째 배열 원소

▶ multiply : 배열의 원소끼리 곱셈

▶ divide : 첫번째 배열의 원소에서 두번째 배열의 원소를 나눗셈

▶ power : 첫번째 배열의 원소에 두번째 배열의 원소만큼 제곱

▶maximum, fmax : 두 원소중 큰 값을 반환, fmax는 NaN 무시

▶ minimum, fmin : 두 원소중 작은 값을 반환, fmin는 NaN 무시

▶ mod : 첫번째 배열의 원소에 두번째 배열의 원소를 나눈 나머지

▶ greater, greater_equal, less, less_equal, equal, not_equal : 두 원소간의 >, >=, <, <=, ==, != 비교 연산 결과를 불리언 배열로 반환

▶ logical_and, logical_or, logical_xor : 각각 두 원소간의 논리연산 &, |, ^ 결과를 반환
