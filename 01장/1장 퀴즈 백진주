1. 리터럴 표기법의 이점
- 짧게 코드 작성이 가능
- 다양한 타입의 값을 생성 할 수 있음

2. 리스트와 튜플의 차이점
- 리스트 : 중간에 변경이 가능(가변), 딕셔너리의 key값으로 쓸 수 없음
- 튜플 : 변경이 불가능(불변적), 딕셔너리의 key값으로 사용 가능

3. 유니버셜 함수의 종류
<단일 배열에 사용하는 함수>
abs, fabs : 각 원소의 절대값을 구한다. 복소수가 아닌 경우에는 fabs로 빠르게 연산가능 
sqrt  : 제곱근을 계산 arr ** 0.5와 동일 
square : 제곱을 계산 arr ** 2와 동일 
Exp : 각 원소에 지수 ex를 계산 
Log, log10, log2, logp : 각각 자연로그, 로그10, 로그2, 로그(1+x) 
sign : 각 원소의 부호를 계산 
ceil : 각 원소의 소수자리 올림 
floor : 각 원소의 소수자리 버림 
rint : 각 원소의 소수자리 반올림. dtype 유지 
modf : 원소의 몫과 나머지를 각각 배열로 반환 
isnan : 각 원소가 숫자인지 아닌지 NaN 나타내는 불리언 배열 
isfinite, isinf : 배열의 각 원소가 유한한지 무한한지 나타내는 불리언 배열 
cos, cosh, sin, sinh, tan, tanh : 일반 삼각함수와 쌍곡삼각 함수 
logical_not : 각 원소의 논리 부정(not) 값 계산. -arr와 동일 

<서로 다른 배열 간에 사용하는 함수>
add : 두 배열에서 같은 위치의 원소끼리 덧셈 
subtract  : 첫번째 배열 원소 - 두번째 배열 원소
multiply  : 배열의 원소끼리 곱셈 
divide : 첫번째 배열의 원소에서 두번째 배열의 원소를 나눗셈 
power  : 첫번째 배열의 원소에 두번째 배열의 원소만큼 제곱
maximum, fmax : 두 원소 중 큰 값을 반환. fmax는 NaN 무시 
minimum, fmin : 두 원소 중 작은 값 반환. fmin는 NaN 무시 
mod  : 첫번째 배열의 원소에 두번째 배열의 원소를 나눈 나머지 
greater, greater_equal, less, less_equal, equal, not_equal  : 두 원소 간의 >, >=, <, <=, ==, != 비교연산 결과를 불리언 배열로 반환 
logical_and, logical_or, logical_xor : 각각 두 원소 간의 논리연산, &, |, ^ 결과를 반환 
